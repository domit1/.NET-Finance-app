@{
    ViewData["Title"] = "Expenses";
}
@model IEnumerable<Expense>

<div class="text-center">
    <h1 class="display-4">Expenses</h1>
    <br />
    <hr />
    <h2 style="font-weight: bold; font-size: 1.5em;">Total expenses: @ViewBag.Expenses€</h2>
    <br />

    <div class="table-box">
        <div class="mb-3 d-flex justify-content-between align-items-start">
            <!-- Filters Button with Dropdown -->
            <div class=" d-flex gap-2">
                <!-- Filters Button -->
                <div class="btn-group">
                    <button type="button" class="btn btn-primary dropdown-toggle" data-bs-toggle="dropdown" aria-expanded="false">
                        Filters
                    </button>

                    <ul class="dropdown-menu p-3 filters-dropdown">
                        <form asp-action="Expenses" method="get" class="px-3 py-2">
                            <!-- Description Filter -->
                        <li>
                            <label for="filter" class="form-label">Filter by Description:</label>
                            <input type="text" name="filter" class="form-control" placeholder="Enter description" value="@ViewBag.Filter" />
                        </li>

                        <!-- Price Filter -->
                        <li class="mt-3">
                            <label for="filterPrice" class="form-label">Filter by Price:</label>
                            <input type="number" name="filterPrice" class="form-control" value="@ViewBag.FilterPrice" step="0.01" placeholder="Enter price" />
                            <select name="priceCondition" class="form-select mt-2">
                                <option value="lower" selected="@(ViewBag.PriceCondition == "lower")">Lower than</option>
                                <option value="higher" selected="@(ViewBag.PriceCondition == "higher")">Higher than</option>
                                <option value="equal" selected="@(ViewBag.PriceCondition == "equal")">Equal to</option>
                            </select>
                        </li>

                        <!-- Date Filter -->
                        <li class="mt-3">
                            <label for="filterDate" class="form-label">Filter by Date:</label>
                            <input type="date" name="filterDate" class="form-control" value="@ViewBag.FilterDate?.ToString("yyyy-MM-dd")" />
                            <select name="dateCondition" class="form-select mt-2">
                                <option value="before" selected="@(ViewBag.DateCondition == "before")">Before</option>
                                <option value="after" selected="@(ViewBag.DateCondition == "after")">After</option>
                                <option value="equal" selected="@(ViewBag.DateCondition == "equal")">Equal to</option>
                            </select>
                        </li>

                        <!-- Sort Option -->
                        <li class="mt-3">
                            <label for="sortOrder" class="form-label">Sort By:</label>
                            <select name="sortOrder" class="form-select">
                                <option value="price_asc" selected="@(ViewBag.SortOrder == "price_asc")">Price: Low to High</option>
                                <option value="price_desc" selected="@(ViewBag.SortOrder == "price_desc")">Price: High to Low</option>
                                <option value="date_asc" selected="@(ViewBag.SortOrder == "date_asc")">Date: Old to New</option>
                                <option value="date_desc" selected="@(ViewBag.SortOrder == "date_desc")">Date: New to Old</option>
                            </select>
                        </li>

                        <!-- Apply Filters Button -->
                        <li class="mt-3">
                            <button type="submit" class="btn btn-secondary">Apply Filters</button>
                        </li>
                        </form>
                    </ul>
                </div>

                <!-- Remove Filters Button -->
                <a asp-action="Expenses" class="btn btn-danger">Remove Filters</a>
            </div>

            <!-- Records Per Page -->
            <form method="get" asp-action="Expenses" class="d-inline">
                <label for="pageSize" class="form-label">Records per page:</label>
                <select id="pageSize" name="pageSize" class="form-select d-inline w-auto" onchange="this.form.submit()">
                    <option value="10" selected="@(ViewBag.PageSize == 10)">10</option>
                    <option value="25" selected="@(ViewBag.PageSize == 25)">25</option>
                    <option value="50" selected="@(ViewBag.PageSize == 50)">50</option>
                    <option value="100" selected="@(ViewBag.PageSize == 100)">100</option>
                </select>
                <input type="hidden" name="pageNumber" value="@ViewBag.PageNumber" />
                <input type="hidden" name="filter" value="@ViewBag.Filter" />
                <input type="hidden" name="filterPrice" value="@ViewBag.FilterPrice" />
                <input type="hidden" name="priceCondition" value="@ViewBag.PriceCondition" />
                <input type="hidden" name="filterDate" value="@ViewBag.FilterDate?.ToString("yyyy-MM-dd")" />
                <input type="hidden" name="dateCondition" value="@ViewBag.DateCondition" />
                <input type="hidden" name="sortOrder" value="@ViewBag.SortOrder" />
            </form>

        </div>
        <table class="table">
            <thead>
                <tr>
                    <th>
                        Id
                    </th>
                    <th>
                        Value
                    </th>
                    <th>
                        Description
                    </th>
                    <th>
                        Date
                    </th>
                    <th>
                        Actions
                    </th>
                </tr>
            </thead>
            <tbody>
                @{
                    foreach (var expense in Model)
                    {
                        // Determine the background color based on the expense value
                        string rowClass = expense.Value switch
                        {
                            var value when value > 10 => "table-dark-red", // Dark red for expenses above 10
                            var value when value > 0 && value <= 10 => "table-light-red", // Lighter red for expenses between 0 and 10
                            var value when value >= -10 && value <= 0 => "table-light-green", // Light green for expenses between 0 and -10
                            var value when value < -10 => "table-dark-green", // Dark green for expenses below -10
                            _ => ""
                        };
                        <tr class="@rowClass">
                            <td>@expense.Id</td>
                            <td>@expense.Value€</td>
                            <td>@expense.Description</td>
                            <td>@expense.Date.ToString("yyyy-MM-dd")</td>
                            <td>
                                <a asp-action="CreateEditExpense" asp-route-id="@expense.Id">Edit</a>
                                <a asp-action="DeleteExpense" asp-route-id="@expense.Id">Delete</a>
                            </td>
                        </tr>
                    }
                }
            </tbody>
        </table>

        <!-- Pagination -->
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                @for (int i = 1; i <= ViewBag.TotalPages; i++)
                {
                    <li class="page-item @(i == ViewBag.PageNumber ? "active" : "")">
                        <a class="page-link"
                       asp-action="Expenses"
                       asp-route-pageNumber="@i"
                       asp-route-pageSize="@ViewBag.PageSize"
                       asp-route-filter="@ViewBag.Filter"
                       asp-route-filterPrice="@ViewBag.FilterPrice"
                       asp-route-priceCondition="@ViewBag.PriceCondition"
                       asp-route-filterDate="@ViewBag.FilterDate?.ToString("yyyy-MM-dd")"
                       asp-route-dateCondition="@ViewBag.DateCondition"
                       asp-route-sortOrder="@ViewBag.SortOrder">
                            @i
                        </a>
                    </li>
                }
            </ul>
        </nav>



        <!-- Two Graphs Below the Table -->

        <h4>Cumulative Total Expenses</h4>
        <canvas id="cumulativeChart" style="height: 400px;"></canvas>

        <h4>Daily Total Expenses</h4>
        <canvas id="dailyChart" style="height: 400px;"></canvas>


        <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
        <script>

            var cumulativeData = JSON.parse('@Html.Raw(ViewBag.GraphDataCumulative)');
            var dailyData = JSON.parse('@Html.Raw(ViewBag.GraphDataDaily)');

            // Prepare labels and data for the cumulative chart
            var cumulativeLabels = cumulativeData.map(item => item.Date);
            var cumulativeExpenses = cumulativeData.map(item => item.CumulativeTotal);

            // Prepare labels and data for the daily chart
            var dailyLabels = dailyData.map(function (item) {
                var date = new Date(item.Date);
                date.setDate(date.getDate() + 1);  // Add one day to the date
                return date.toISOString().split('T')[0]; // Get only the date part in YYYY-MM-DD format
            });

            var dailyExpenses = dailyData.map(function (item) {
                return item.Total; // The daily expenses
            });

            // Create the cumulative expenses chart
            // Get the canvas elements by their IDs
            var cumulativeCtx = document.getElementById('cumulativeChart').getContext('2d');
            var dailyCtx = document.getElementById('dailyChart').getContext('2d');

            // Example of initializing the cumulative chart
            new Chart(cumulativeCtx, {
                type: 'line',
                data: {
                    labels: cumulativeLabels, // Ensure cumulativeLabels is defined
                    datasets: [{
                        label: 'Cumulative Total Expenses',
                        data: cumulativeExpenses, // Ensure cumulativeExpenses is defined
                        borderColor: 'rgba(75, 192, 192, 1)',
                        fill: false,
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            type: 'category',
                            title: {
                                display: true,
                                text: 'Date'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Amount (€)'
                            }
                        }
                    }
                }
            });

            // Initialize the daily chart in a similar way
            new Chart(dailyCtx, {
                type: 'line',
                data: {
                    labels: dailyLabels, // Ensure dailyLabels is defined
                    datasets: [{
                        label: 'Daily Total Expenses',
                        data: dailyExpenses, // Ensure dailyExpenses is defined
                        borderColor: 'rgba(153, 102, 255, 1)',
                        fill: false,
                        tension: 0.1
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        x: {
                            type: 'category',
                            title: {
                                display: true,
                                text: 'Date'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            title: {
                                display: true,
                                text: 'Amount (€)'
                            }
                        }
                    }
                }
            });

        </script>



    </div>
</div>
